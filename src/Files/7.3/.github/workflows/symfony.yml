name: CI
on:
    push:
        branches-ignore:
            - master
    pull_request:
        branches:
            - master

env:
    APP_ENV: test

jobs:
    security-checker:
        name: Dependencies security check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Security checker
              run: make security

    coding-standards:
        name: Coding standards check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Code Sniffer [PHP-CS]
              uses: docker://damienlagae/phpqa:7.3
              with:
                  args: phpcs -v --standard=PSR2 --ignore=./src/Kernel.php ./src
            - name: PHPStan
              uses: docker://damienlagae/phpqa:7.3
              with:
                  args: phpstan analyze ./src/ -l 8
            - name: PHP Mess Detector
              uses: docker://damienlagae/phpqa:7.3
              with:
                  args: phpmd ./src/ ansi ./codesize.xml
            - name: Twig lint
              uses: docker://damienlagae/phpqa:7.3
              with:
                  args: twig-lint lint ./templates

    functional-tests:
        name: Functional Tests (PHP ${{ matrix.php-versions }})
        runs-on: ubuntu-latest
        needs: [ security-checker, coding-standards ]
        services:
            mariadb:
                image: mariadb:10.1.40
                env:
                    MYSQL_ROOT_PASSWORD: toor
                    MYSQL_DATABASE: main_test
                    MYSQL_USER: root
                    MYSQL_PASSWORD: toor
                ports:
                    - 3306:3306
                options: >-
                    --health-cmd="mysqladmin ping"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=3
            redis:
                image: redis
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        strategy:
            fail-fast: true
            matrix:
                php-versions: ['7.3']
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            # https://github.com/shivammathur/setup-php (community)
            - name: Setup PHP, extensions and composer with shivammathur/setup-php
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}
                  extensions: ctype, dom, gd, iconv, intl, json, mbstring, pdo, xml
              env:
                  update: true

            # —— Composer 🧙‍️ —————————————————————————————————————————————————————————
            - name: Validate composer.json and composer.lock
              run: composer validate

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Cache composer dependencies
              uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Install Composer dependencies
              run: make install

            # —— Symfony 🎵 ——————————————————————————————————————————————————————————
            - name: Check requirements
              run: make requirements

            - name: Generate SSL keys for JWTAuthentication
              run: make jwt-token

            # —— Assets 💄 ——————————————————————————————————————————————————————————
            - name: Cache node_modules
              uses: actions/cache@v1
              id: yarn-cache-node-modules
              with:
                  path: node_modules
                  key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: ${{ runner.os }}-yarn-cache-node-modules-
            - name: Yarn install
              if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
              run: yarn install
            - name: Yarn build
              run: yarn run encore production

            # —— Tests ✅ ———————————————————————————————————————————————————————————
            - name: Run functionnal tests
              run: make test-functional

    unit-tests:
        name: Unit Tests (PHP ${{ matrix.php-versions }})
        runs-on: ubuntu-latest
        needs: [ security-checker, coding-standards ]
        services:
            redis:
                image: redis
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        strategy:
            fail-fast: true
            matrix:
                php-versions: ['7.3']
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            # https://github.com/shivammathur/setup-php (community)
            - name: Setup PHP, extensions and composer with shivammathur/setup-php
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}
                  extensions: ctype, dom, gd, iconv, intl, json, mbstring, pdo, xml
              env:
                  update: true

            # —— Composer 🧙‍️ —————————————————————————————————————————————————————————
            - name: Validate composer.json and composer.lock
              run: composer validate

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Cache composer dependencies
              uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Install Composer dependencies
              run: make install

            # —— Symfony 🎵 ——————————————————————————————————————————————————————————
            - name: Check requirements
              run: make requirements

            - name: Serve application
              run: make serve

            # —— Tests ✅ ———————————————————————————————————————————————————————————
            - name: Run unit tests
              run: make test-unit
